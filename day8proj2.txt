# Helpdesk ORM

A Spring Boot 3.5.4 based Helpdesk Ticket Management System using Hibernate ORM and PostgreSQL.  
This project demonstrates a clean layered architecture with entities, repositories, services, and controllers.

## 📂 Project Structure
```
Directory structure:
└── adrin-bershik-c-j-day8proj2/
    ├── mvnw
    ├── mvnw.cmd
    ├── pom.xml
    ├── src/
    │   ├── main/
    │   │   ├── java/
    │   │   │   └── com/
    │   │   │       └── example/
    │   │   │           └── helpdeskorm/
    │   │   │               ├── HelpdeskormApplication.java
    │   │   │               ├── controller/
    │   │   │               │   ├── TagController.java
    │   │   │               │   ├── TicketController.java
    │   │   │               │   ├── TicketTagController.java
    │   │   │               │   └── UserController.java
    │   │   │               ├── domain/
    │   │   │               │   ├── Tag.java
    │   │   │               │   ├── Ticket.java
    │   │   │               │   ├── TicketTag.java
    │   │   │               │   └── User.java
    │   │   │               ├── repository/
    │   │   │               │   ├── TagRepository.java
    │   │   │               │   ├── TicketRepository.java
    │   │   │               │   ├── TicketTagRepository.java
    │   │   │               │   └── UserRepository.java
    │   │   │               └── service/
    │   │   │                   ├── TagService.java
    │   │   │                   ├── TicketService.java
    │   │   │                   ├── TicketTagService.java
    │   │   │                   └── UserService.java
    │   │   └── resources/
    │   │       └── application.properties
    │   └── test/
    │       └── java/
    │           └── com/
    │               └── example/
    │                   └── helpdeskorm/
    │                       └── HelpdeskormApplicationTests.java
    └── .mvn/
        └── wrapper/
            └── maven-wrapper.properties
```

## 🚀 Features
- CRUD operations for **Users**, **Tickets**, **Tags**, and **TicketTags**
- PostgreSQL database integration with Hibernate ORM
- REST API endpoints with Spring Web
- Layered architecture for maintainability

## 🛠️ Technologies Used
- **Java 21**
- **Spring Boot 3.5.4**
- **Spring Data JPA**
- **Hibernate 6**
- **PostgreSQL**
- **Maven**

## ⚙️ Setup & Run

### 1️⃣ Configure Database
Update `src/main/resources/application.properties`:
```properties
spring.datasource.url=jdbc:postgresql://localhost:5432/helpdeskdb
spring.datasource.username=postgres
spring.datasource.password=yourpassword
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true



package com.example.helpdeskorm.controller;
import com.example.helpdeskorm.service.TicketService;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import java.util.stream.Collectors;

@RestController
public class TicketController {

    private final TicketService ticketService;

    public TicketController(TicketService ticketService) {
        this.ticketService = ticketService;
    }

    @GetMapping("/tickets")
    public List<Object> getTicketsWithTags() {
        return ticketService.getAllTickets().stream().map(ticket -> {
            return new Object() {
                public String title = ticket.getTitle();
                public String user = ticket.getUser().getName();
                public List<String> tags = ticket.getTags().stream()
                        .map(tag -> tag.getName())
                        .collect(Collectors.toList());
            };
        }).collect(Collectors.toList());
    }
}




package com.example.helpdeskorm.domain;

import jakarta.persistence.*;
import java.util.Set;

@Entity
@Table(name = "tags")
public class Tag {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "tagid")
    private Long tagId;

    @Column(name = "name", nullable = false)
    private String name;

    @ManyToMany(mappedBy = "tags")
    private Set<Ticket> tickets;

    public Tag() {
    }

    public Long getTagId() {
        return tagId;
    }

    public void setTagId(Long tagId) {
        this.tagId = tagId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Set<Ticket> getTickets() {
        return tickets;
    }

    public void setTickets(Set<Ticket> tickets) {
        this.tickets = tickets;
    }

}


package com.example.helpdeskorm.domain;

import jakarta.persistence.*;
import java.util.Set;

@Entity
@Table(name = "tickets")
public class Ticket {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ticketid")
    private Long ticketId;

    @Column(name = "title", nullable = false)
    private String title;

    @ManyToOne
    @JoinColumn(name = "userid", nullable = false)
    private User user;

    @ManyToMany
    @JoinTable(name = "tickettags", joinColumns = @JoinColumn(name = "ticketid"), inverseJoinColumns = @JoinColumn(name = "tagid"))
    private Set<Tag> tags;

    public Ticket() {
    }

    public Long getTicketId() {
        return ticketId;
    }

    public void setTicketId(Long ticketId) {
        this.ticketId = ticketId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public Set<Tag> getTags() {
        return tags;
    }

    public void setTags(Set<Tag> tags) {
        this.tags = tags;
    }
}


package com.example.helpdeskorm.domain;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;

@Entity
@Table(name = "ticket_tags")
public class TicketTag {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "ticket_id")
    private Ticket ticket;

    @ManyToOne
    @JoinColumn(name = "tag_id")
    private Tag tag;

    public TicketTag() {}

    public TicketTag(Long id, Ticket ticket, Tag tag) {
        this.id = id;
        this.ticket = ticket;
        this.tag = tag;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Ticket getTicket() {
        return ticket;
    }

    public void setTicket(Ticket ticket) {
        this.ticket = ticket;
    }

    public Tag getTag() {
        return tag;
    }

    public void setTag(Tag tag) {
        this.tag = tag;
    }
}

package com.example.helpdeskorm.domain;

import jakarta.persistence.*;
import java.util.List;

@Entity
@Table(name = "users")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    @Column(name = "name", nullable = false)
    private String name;

    @Column(name = "roll")
    private String roll;

    @OneToMany(mappedBy = "user")
    private List<Ticket> tickets;

    public User() {
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getRoll() {
        return roll;
    }

    public void setRoll(String roll) {
        this.roll = roll;
    }

    public List<Ticket> getTickets() {
        return tickets;
    }

    public void setTickets(List<Ticket> tickets) {
        this.tickets = tickets;
    }
}


package com.example.helpdeskorm.repository;

import com.example.helpdeskorm.domain.Ticket;

import org.springframework.data.jpa.repository.JpaRepository;

public interface TicketRepository extends JpaRepository<Ticket, Long> {
}


package com.example.helpdeskorm.repository;

import com.example.helpdeskorm.domain.User;
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Long> {}



package com.example.helpdeskorm.service;

import com.example.helpdeskorm.domain.Ticket;
import com.example.helpdeskorm.repository.TicketRepository;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class TicketService {

    private final TicketRepository ticketRepository;

    public TicketService(TicketRepository ticketRepository) {
        this.ticketRepository = ticketRepository;
    }

    public List<Ticket> getAllTickets() {
        return ticketRepository.findAll();
    }
}
